#!/usr/bin/env python3

import configparser
import os
import psutil
import signal
import sys
import time
from PIL import Image, ImageFont
from datetime import datetime
from luma.core import cmdline, error
from luma.core.render import canvas

# Load presets
contrast = 255
refresh = 10
show_logo = 'yes'
net_name = 'eth0'
s1_name = 'sd'
s1_path = '/'

# Load config file
config_file = '/etc/sys-oled.conf'
if os.path.isfile(config_file):
    config = configparser.ConfigParser()
    config.read(config_file)
    contrast = int(config.get('main', 'contrast'))
    refresh = float(config.get('main', 'refresh'))
    show_logo = config.get('main', 'show_logo')
    net_name = config.get('device', 'network_name')
    s1_name = config.get('device', 'storage1_name')
    s1_path = config.get('device', 'storage1_path')
    if config.has_option('device', 'storage2_name'):
        s2_name = config.get('device', 'storage2_name')
        s2_path = config.get('device', 'storage2_path')

# Load font
font_path = os.path.abspath(os.path.join(os.path.dirname(__file__),
                                         '../share/sys-oled', 'C&C Red Alert [INET].ttf'))
font = ImageFont.truetype(font_path, 12)
font_big = ImageFont.truetype(font_path, 18)


def get_device(actual_args=None):
    if actual_args is None:
        actual_args = sys.argv[1:]
    parser = cmdline.create_parser(description='luma.core arguments')
    args = parser.parse_args(actual_args)

    if args.config:
        config = cmdline.load_config(args.config)
        args = parser.parse_args(config + actual_args)

    try:
        device = cmdline.create_device(args)
    except error.Error as e:
        parser.error(e)

    return device


def bytes2human(n):
    symbols = ('K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y')
    prefix = {}
    for i, s in enumerate(symbols):
        prefix[s] = 1 << (i + 1) * 10
    for s in reversed(symbols):
        if n >= prefix[s]:
            value = float(n) / prefix[s]
            if s in ['K', 'M']:
                return '%d%s' % (int(value), s)
            else:
                return '%.1f%s' % (value, s)
    return "%sB" % n


def cpu_usage():
    load = psutil.cpu_percent(interval=None)
    temp = psutil.sensors_temperatures()['cpu_thermal']
    uptime = datetime.now().replace(second=0, microsecond=0) - datetime.fromtimestamp(psutil.boot_time())
    return "ld: %s%% T: %sC up: %s" \
           % (str(load).split('.')[0], str(temp[0].current).split('.')[0], str(uptime).split(',')[0][:-3])


def mem_usage():
    usage = psutil.virtual_memory()
    return "mem: %s / %s - %.0f%%" \
           % (bytes2human(usage.used), bytes2human(usage.total), usage.percent)


def disk_usage(name, dir):
    usage = psutil.disk_usage(dir)
    return name + ": %s / %s - %.0f%%" \
           % (bytes2human(usage.used), bytes2human(usage.total), usage.percent)


def network(iface):
    addr = psutil.net_if_addrs()[iface]
    return "%s: %s" \
           % (iface, addr[0].address)


def host_time():
    now = datetime.now()
    return "" + now.strftime("%Y-%m-%d %H:%M")

def fan():
    fan = psutil.sensors_fans()['pwmfan']
    return "%i %s" \
            % (fan[0].current, "rpm")

def display_info(device):
    with canvas(device) as draw:
        draw.text((0, 0), cpu_usage(), font=font, fill="white")
        draw.line((0, 13) + (128, 13), fill="white")
        draw.text((0, 15), mem_usage(), font=font, fill="white")
        draw.text((0, 27), disk_usage(s1_name, s1_path), font=font, fill="white")
        if 's2_name' in globals():
            draw.text((0, 39), disk_usage(s2_name, s2_path), font=font, fill="white")
            draw.text((0, 51), network(net_name), font=font, fill="white")
        else:
            draw.text((0, 39), network(net_name), font=font, fill="white")
            draw.text((0, 51), fan(), font=font, fill="white")


def logo(device, msg):
    img_path = os.path.abspath(os.path.join(os.path.dirname(__file__),
                                            '../share/sys-oled', 'armbian-oled.png'))
    logo = Image.open(img_path).convert("RGBA")

    with canvas(device) as draw:
        draw.bitmap((0, -2), logo, fill="white")
        draw.text((0, 50), msg, font=font_big, fill="white")


def sigterm_handler():
    sys.exit(0)


signal.signal(signal.SIGTERM, sigterm_handler)


def main():
    while True:
        display_info(device)
        time.sleep(refresh)
        if show_logo == "yes":
            logo(device, host_time())
            time.sleep(refresh / 2)


if __name__ == "__main__":
    try:
        device = get_device()
        device.contrast(contrast)
        main()
    except KeyboardInterrupt:
        pass
